knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(tidyverse)
library(dplyr)
#getwd()
BUSCO_FLYE.df <- fread("./Data/BUSCO_FLYE.5kb.q10.tsv")
BUSCO_FLYE.df$Status <- as.factor(BUSCO_FLYE.df$Status)
#str(BUSCO_FLYE.df)
levels(BUSCO_FLYE.df$Status)
BUSCO_FLYE.racon1.df <- fread("./Data/BUSCO_FLYE.racon1.q10.tsv")
BUSCO_FLYE.racon1.df$Status <- as.factor(BUSCO_FLYE.racon1.df$Status)
head(BUSCO_FLYE.racon1.df)
Complete_FLYE <- BUSCO_FLYE.df %>% filter(Status == 'Complete')
Complete_FLYE.racon1 <- BUSCO_FLYE.racon1.df %>%  filter(Status == 'Complete')
Complete_FLYE_only <- setdiff(Complete_FLYE$`# Busco id`, Complete_FLYE.racon1$`# Busco id`) %>% data.frame()
colnames(Complete_FLYE_only) <- "# Busco id"
Complete_FLYE_only.df <- left_join(Complete_FLYE_only, Complete_FLYE)
Complete_FLYE_only
#Extract list of contigs in a .csv file
#write.table(Complete_FLYE_only, file = "Complete_FLYE_only.csv", sep = ",", row.names = TRUE, col.names = NA)
library(ggplot2)
ggplot(Complete_FLYE_only.df, aes(x = Score, y = Length)) + geom_point()
fivenum(Complete_FLYE_only.df$Score)
# Generate a list of fragemented genes
Fragmented_FLYE.racon1 <- BUSCO_FLYE.racon1.df %>% filter(Status == 'Fragmented')
Fragmented_FLYE.racon1 <- Fragmented_FLYE.racon1$`# Busco id` %>% data.frame
colnames(Fragmented_FLYE.racon1) <- "# Busco id"
# Generate a list of missing genes
Missing_FLYE.racon1 <- BUSCO_FLYE.racon1.df %>% filter(Status == 'Missing')
Missing_FLYE.racon1 <- Missing_FLYE.racon1$`# Busco id` %>% data.frame()
colnames(Missing_FLYE.racon1) <- "# Busco id"
Missing_FLYE.racon1
# Take the list of the genes only complete in the BUSCO dataset and see if they intersect with the list of fragmented genes from the BUSCO.racon1 dataset.
Complete_in_fragmented_racon1 <- intersect(Complete_FLYE_only, Fragmented_FLYE.racon1)
nrow(Complete_in_fragmented_racon1)
# complete FLYE genes in fragmented FLYE.racon1 genes
Complete_in_fragmented_racon1.df <- left_join(Complete_in_fragmented_racon1, Complete_FLYE_only.df)
head(Complete_in_fragmented_racon1.df) # this is the data for the Complete_FLYE_only.df data for the fragmented FLYE.racon1 genes
# fragmented FLYE.racon1 genes in complete FLYE genes
Fragmented.racon1_in_complete.df <- left_join(Complete_in_fragmented_racon1, BUSCO_FLYE.racon1.df)
head(Fragmented.racon1_in_complete.df) # this is the data for the fragmented FLYE.racon1 genes
# the scores and lengths of the fragmented FLYE.racon1 genes that are complete in the unpolished assembly
# blue is the scores and lengths of the genes as they were complete in the unpolished assembly
# red is the scores and lengths for the genes as they were fragmented in the polished assembly
ggplot() + geom_jitter(data = Complete_in_fragmented_racon1.df, colour = "blue", alpha = 0.5, aes(x = Score, y = Length)) + geom_smooth(data = Complete_in_fragmented_racon1.df, colour = "blue", aes(x = Score, y = Length)) + theme_classic() + geom_jitter(data = Fragmented.racon1_in_complete.df, colour = "red", alpha = 0.5, aes(x = Score, y = Length)) + geom_smooth(data = Fragmented.racon1_in_complete.df, colour = "red", aes(x = Score, y = Length))
#ggplot() + geom_jitter(data = Fragmented.racon1_in_complete.df, colour = "red", alpha = 0.5, aes(x = Score, y = Length)) + geom_smooth(data = Fragmented.racon1_in_complete.df, colour = "red", aes(x = Score, y = Length)) + theme_classic()
# Take the list of the genes only complete in the BUSCO dataset and see if they intersect with the list of missing genes from the BUSCO.racon1 dataset.
Complete_in_missing.racon1 <- intersect(Complete_FLYE_only, Missing_FLYE.racon1)
nrow(Complete_in_missing.racon1)
Complete_in_missing.racon1
#Extract list of contigs in a .csv file
#write.table(Complete_in_missing.racon1, file = "Complete_in_missing.racon1.csv", sep = ",", row.names = TRUE, col.names = NA)
# complete FLYE genes in missing FLYE.racon1 genes
Complete_in_missing.racon1.df <- left_join(Complete_in_missing.racon1, Complete_FLYE_only.df)
head(Complete_in_missing.racon1.df)
ggplot(Complete_in_missing.racon1.df, aes(x = Score, y = Length)) + geom_point()
# missing FLYE.racon1 genes in complete FLYE genes
Missing.racon1_in_complete.df <- left_join(Complete_in_missing.racon1, BUSCO_FLYE.racon1.df)
head(Missing.racon1_in_complete.df)
# Generate a list of missing genes
Duplicated_FLYE.racon1 <- BUSCO_FLYE.racon1.df %>% filter(Status == 'Duplicated')
Duplicated_FLYE.racon1 <- Duplicated_FLYE.racon1$`# Busco id` %>% data.frame()
colnames(Duplicated_FLYE.racon1) <- "# Busco id"
# find the genes that are complete in the unpolished assembly but duplicated in the polished assembly
Complete_in_Duplicated_racon1 <- intersect(Complete_FLYE_only, Duplicated_FLYE.racon1)
nrow(Complete_in_Duplicated_racon1)
summary_table <- read_csv("./summary.csv")
summary_table
# Import data from bcftools call as .tsv
# Unpolished (Flye_5kb.q10.fasta)
unpolished_variants.df <- fread("./Data/Busco_aln_FLYE2.5kb.q10_variants.tsv")
nrow(unpolished_variants.df)
# Polished (Flye_5kb.q10_racon1_q10.fasta)
polished_variants.df <- fread("./Data/Busco_aln_FLYE2.5kb.q10_racon1_q10_variants.tsv")
nrow(polished_variants.df)
# Convert chromosome (contig id) into a factor
unpolished_variants.df$CHROM <- as.factor(unpolished_variants.df$CHROM)
polished_variants.df$CHROM <- as.factor(polished_variants.df$CHROM)
# Take the levels of the factor so that each contig id appears only once
unpolished_contigs <- levels(unpolished_variants.df$CHROM) %>% data.table()
colnames(unpolished_contigs) <- "contig"
nrow(unpolished_contigs)
polished_contigs <- levels(polished_variants.df$CHROM) %>% data.table()
colnames(polished_contigs) <- "contig"
nrow(polished_contigs)
intersect(polished_contigs, unpolished_contigs)
# setdiff(x, y, â€¦) Rows that appear in x but not y.
contigs_polished_only <- setdiff(polished_contigs, unpolished_contigs)
contigs_polished_only
variants_per_contig_unpolished.df <- unpolished_variants.df %>% count(CHROM,TYPE)
variants_per_contig_polished.df <- polished_variants.df %>% count(CHROM, TYPE)
variants_per_contig_unpolished.df
variants_per_contig_polished.df
indel_polished.df <- variants_per_contig_polished.df %>% filter(TYPE == "INDEL")
sum(indel_polished.df$n)
# convert contig to a factor
contigs_polished_only$contig <- as.factor(contigs_polished_only$contig)
# change the name of contig to CHROM so it matches the other dataset
colnames(contigs_polished_only) <- "CHROM"
# join the infomation about the number of variants per contig
contigs_polished_only.df <- left_join(contigs_polished_only, variants_per_contig_polished.df)
contigs_polished_only.df
# add up all of the variants in contigs that only have variants on them in the polished assembly
sum(contigs_polished_only.df$n)
variants_polished_only.df <- read_csv("./Contigs both assemblies variants polished specific.csv", col_types = "fci")
variants_polished_only.df
sum(variants_polished_only.df$n)
levels(variants_polished_only.df$CHROM)
unpolished_variants.df <- filter(unpolished_variants.df, CHROM == "contig_1359", POS == 2764236:2764237)
unpolished_variants.df[ , 1:6]
polished_variants.df <- filter(polished_variants.df, CHROM == "contig_1359")
polished_variants.df[ 54:55, 1:6]
541-38
head(unpolished_variants.df)
# Import data from bcftools call as .tsv
# Unpolished (Flye_5kb.q10.fasta)
unpolished_variants.df <- fread("./Data/Busco_aln_FLYE2.5kb.q10_variants.tsv")
head(unpolished_variants.df)
nrow(unpolished_variants.df)
# Polished (Flye_5kb.q10_racon1_q10.fasta)
polished_variants.df <- fread("./Data/Busco_aln_FLYE2.5kb.q10_racon1_q10_variants.tsv")
nrow(polished_variants.df)
variants_per_contig_polished.df
colnames(variants_per_contig_unpolished.df) <- c("CHROM", "TYPE", "n1")
inner_join(variants_per_contig_polished.df, variants_per_contig_unpolished.df)
variants_polished_only.df <- inner_join(variants_per_contig_polished.df, variants_per_contig_unpolished.df)
variants_polished_only.df <- mutate(variants_polished_only.df, diff = n - n1)
variants_polished_only.df
sum(variants_polished_only.df$diff)
variants_polished_only.df <-  read_csv("./Contigs both assemblies variants polished specific.csv", col_types = "fci")
var
variants_polished_only.df
variants_polished_only.df <- mutate(variants_polished_only.df, diff = n-n1)
colnames(variants_per_contig_unpolished.df) <- c("CHROM", "TYPE", "n1")
dat <- inner_join(variants_per_contig_polished.df, variants_per_contig_unpolished.df)
dat <- mutate(dat, diff = n-n1)
dat
colnames(variants_per_contig_unpolished.df) <- c("CHROM", "TYPE_un", "n1")
dat <- inner_join(variants_per_contig_polished.df, variants_per_contig_unpolished.df)
variants_polished_only.df <-  read_csv("./Contigs both assemblies variants polished specific.csv", col_types = "fci")
variants_polished_only.df
dat <- mutate(dat, diff = n-n1)
dat
sum(variants_polished_only.df$n)
colnames(variants_per_contig_unpolished.df) <- c("CHROM", "TYPE_un", "n1")
dat <- inner_join(variants_per_contig_polished.df, variants_per_contig_unpolished.df)
dat
dat <- mutate(dat, diff = n-n1)
dat
variants_per_contig_unpolished.df <- unpolished_variants.df %>% count(CHROM)
variants_per_contig_polished.df <- polished_variants.df %>% count(CHROM)
colnames(variants_per_contig_unpolished.df) <- c("CHROM", "TYPE_un", "n1")
#colnames(variants_per_contig_unpolished.df) <- c("CHROM", "TYPE_un", "n1")
dat <- inner_join(variants_per_contig_polished.df, variants_per_contig_unpolished.df)
dat
variants_per_contig_unpolished.df
colnames(variants_per_contig_unpolished.df) <- c("CHROM", "n1")
#colnames(variants_per_contig_unpolished.df) <- c("CHROM", "TYPE_un", "n1")
dat <- inner_join(variants_per_contig_polished.df, variants_per_contig_unpolished.df)
dat
dat <- mutate(dat, diff = n-n1)
dat
sum(variants_polished_only.df$n)
sum(dat$diff)
